<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://InMapleWoods.github.io</id>
    <title>林中风吟</title>
    <updated>2020-04-01T08:14:07.055Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://InMapleWoods.github.io"/>
    <link rel="self" href="https://InMapleWoods.github.io/atom.xml"/>
    <subtitle>随手笔记，偶有所得</subtitle>
    <logo>https://InMapleWoods.github.io/images/avatar.png</logo>
    <icon>https://InMapleWoods.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 林中风吟</rights>
    <entry>
        <title type="html"><![CDATA[CSS 随笔2]]></title>
        <id>https://InMapleWoods.github.io/post/css-sui-bi-2/</id>
        <link href="https://InMapleWoods.github.io/post/css-sui-bi-2/">
        </link>
        <updated>2020-04-01T08:07:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="css随笔2">CSS随笔2</h1>
<p>接上篇。</p>
<hr>
<h2 id="css过渡">CSS过渡</h2>
<p>通过transition设置过渡时间。利用选择器造成样式变化，形成渐变效果。</p>
<pre><code class="language-css">.login_register {
  transition: height 1s;
  -moz-transition: height 1s;
  /* Firefox 4 */
  -webkit-transition: height 1s;
  /* Safari and Chrome */
  -o-transition: height 1s;
  /* Opera */
}
</code></pre>
<hr>
<h2 id="css媒体查询">CSS媒体查询</h2>
<p>用来做响应式布局。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 随笔1]]></title>
        <id>https://InMapleWoods.github.io/post/css-sui-bi-1/</id>
        <link href="https://InMapleWoods.github.io/post/css-sui-bi-1/">
        </link>
        <updated>2020-03-31T15:53:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="css随笔">CSS随笔</h1>
<p>为了写出一个CSS3做登录界面TAB切换效果，学了点新知识。</p>
<hr>
<h2 id="css选择器">CSS选择器</h2>
<ul>
<li>后代选择器——直接空格：所有后代元素（儿子、孙子）；</li>
<li>子元素选择器——<code>&gt;</code>：直接后代（儿子）；</li>
<li>相邻兄弟选择器——<code>+</code>：选择紧连着另一元素后的元素，二者具有相同的父元素。只会选择的一个相邻的匹配元素；</li>
<li>后续兄弟选择器——<code>~</code>：选取所有指定元素之后的相邻兄弟元素。</li>
</ul>
<p>相邻兄弟元素选择器 只是选择紧跟着的兄弟元素，<br>
后续元素选择器  选择所有符合条件的兄弟元素。</p>
<h2 id="css伪类">CSS伪类</h2>
<p>这次只用了checked伪类，主要响应radio。</p>
<h2 id="label的for">label的for</h2>
<p>label 的 for 属性是绑定表单元素用的，但这次是为了在点击 label 时同时改变 radio 的 checked 状态。将</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git使用]]></title>
        <id>https://InMapleWoods.github.io/post/git-shi-yong/</id>
        <link href="https://InMapleWoods.github.io/post/git-shi-yong/">
        </link>
        <updated>2020-02-23T10:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="git使用">git使用</h1>
<hr>
<h2 id="介绍">介绍</h2>
<p>之前一直很低级的使用git，除了VS集成的git以外几乎没有研究过它。这两天心血来潮，正式的到廖雪峰博客学了波git。和之前所掌握不同的是，这次主要学习了对分支的理解。降低了我之前对master分支反反复复的修改的次数。</p>
<hr>
<h2 id="内容">内容</h2>
<ol>
<li>
<p>git checkout -b {newBranchName} ——创建并切换分支</p>
</li>
<li>
<p>git checkout {branchName} ——切换分支</p>
</li>
<li>
<p>git branch {branchName} ——创建分支</p>
</li>
<li>
<p>git merge --no-ff -m {&quot;message&quot;} {newBranch} ——禁用Fast forward，生成合并分支提交</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个简单的P2P语音通信程序]]></title>
        <id>https://InMapleWoods.github.io/post/yi-ge-jian-dan-de-p2p-yu-yin-tong-xin-cheng-xu/</id>
        <link href="https://InMapleWoods.github.io/post/yi-ge-jian-dan-de-p2p-yu-yin-tong-xin-cheng-xu/">
        </link>
        <updated>2020-02-22T10:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一个简单的p2p语音通信程序">一个简单的P2P语音通信程序</h1>
<hr>
<h2 id="napt的概念及锥型conenat内网穿透">NAPT的概念及锥型（Cone）NAT内网穿透</h2>
<ul>
<li>
<p>NAPT：不仅改变IP地址，还改变发送端口。</p>
</li>
<li>
<p>锥形NAT：存在会话则维护内网IP/Port与外网IP/Port的映射关系，且同一组内网IP/Port与不同外网主机通讯使用同一组IP/Port，不重新分配</p>
</li>
</ul>
<hr>
<h2 id="p2p的概念">P2P的概念</h2>
<p>Peer To Peer，端到端的对等网络，每一个既是Server也是Client。</p>
<hr>
<h2 id="语音通信实现方法">语音通信实现方法</h2>
<ul>
<li>A和B的地址都是内网地址，且在不同的NAT后面</li>
<li>需要一台服务器做中转</li>
<li>若由A发起双方的语音通讯</li>
</ul>
<ol>
<li>
<p>A和B向服务器注册，服务器保存A,B的<strong>公网IP/Port</strong>。（发送端口，接收端口，播放端口，录制端口）</p>
</li>
<li>
<p>A准备发送数据，A<strong>发送端口</strong>向服务器发送<strong>中继请求</strong>，服务器接收请求后向B发送请求。</p>
</li>
<li>
<p>B的<strong>接收端口</strong>发送接收到请求后，B<strong>播放端口</strong>向A的<strong>录制端口</strong>公网IP/Port发送信息,<strong>这就是在B处打洞</strong>。同时B的<strong>发送端口</strong>向服务器发送信息，表明洞已开，同时让A准备接收B的声音信息。</p>
</li>
<li>
<p>服务器接收信息，发送请求，A<strong>接收端口</strong>收到信息后，A的<strong>录制端口</strong>向B的<strong>播放端口</strong>公网IP/Port发送信息，同时A的<strong>播放端口</strong>向B的<strong>录制端口</strong>公网IP/Port发送信息，<strong>这是在A处打洞</strong>。A的<strong>发送端口</strong>向服务器发送信息，表明洞已开，同时让B准备接收A的声音信息。</p>
</li>
<li>
<p>服务器接收信息，发送请求，B<strong>接收端口</strong>收到信息后，B的<strong>录制端口</strong>向A的<strong>播放端口</strong>公网IP/Port发送信息。</p>
</li>
<li>
<p>至此A，B<strong>双方</strong>都能接收到对方的语音信息，两者的连接会话已建立。</p>
</li>
</ol>
<hr>
<p>简而言之，发送端口和接收端口用来与服务器通讯，发送和接收控制指令。录制端口和播放端口用于发送和接收语音数据。</p>
<hr>
<p>为了保持会话，服务器定期向主机发送数据包，以防主机内网IP/Port的映射消失。俗称<strong>心跳包</strong>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[爬取成绩及考试信息推送给自己]]></title>
        <id>https://InMapleWoods.github.io/post/pa-qu-cheng-ji-ji-kao-shi-xin-xi-tui-song-gei-zi-ji/</id>
        <link href="https://InMapleWoods.github.io/post/pa-qu-cheng-ji-ji-kao-shi-xin-xi-tui-song-gei-zi-ji/">
        </link>
        <updated>2019-12-29T10:00:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="爬取成绩及考试信息推送给自己">爬取成绩及考试信息推送给自己</h1>
<hr>
<h2 id="正则表达式的使用">正则表达式的使用</h2>
<p>C#正则表达式使用</p>
<hr>
<h2 id="邮件发送">邮件发送</h2>
<p>C#邮件发送</p>
<hr>
<h2 id="使用cookies模拟登陆用户操作">使用Cookies模拟登陆用户操作</h2>
<p>Header中的Set-Cookies和Cookies</p>
<hr>
<h2 id="定时触发器">定时触发器</h2>
<p>定时触发，与当前信息对比，根据结果发送邮件至通知邮箱</p>
]]></content>
    </entry>
</feed>